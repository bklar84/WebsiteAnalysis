package bak.websiteanalysis;

/**
 * AnalysisOutput is responsible for outputting the data parsed from each
 * file containing html tags. Three files will be created: JSON (.json),
 * Microsoft Excel (.xlsx), and a text file (.txt). These files will be stored
 * in a directory called "output" which can be found in the root directory of
 * the website. This directory will most likely not exist prior to running
 * this program, so it must be created programmatically.
 * 
 * @author Brian Klarman	b.klarman@gmail.com
 */
public class AnalysisOutput {
	
	//************** Data members **************
	
	//************** Nested Classes **************
	
	/**
	 * Creates the output directory in root; ./output/<p>
	 * The text, excel, and JSON files will be saved to this directory.
	 *
	 * @param dirPath output directory path defined in Website class.
	 * @see outputFileName()
	 */
	private void createOutputDirectory(String dirPath) {
		
	}
	
	/**
	 * All output file names must be prefixed with yyyyMMdd-hhmmss-summary.
	 * This method should only be called once so that the three output files
	 * have the same date and time.
	 * <p>
	 * The program generates a date time formatter that corresponds to user
	 * requirements. The string literal "yyyMMdd-hhmmss" should not be changed
	 * unless directed by the customer.
	 * <p>
	 * The string literal "-summary" must not be changed, as that is also a
	 * customer requirement for the filename. "-summary" will appear as the
	 * suffix to all output filenames.
	 *
	 * @return The file name of the file without the type extension
	 *         (e.g. .json)
	 */
	public static String outputFileName() {
		return null;
		
	}
	
	/**
	 * Alerts the user that the output file has been successfully created.
	 * <p>
	 * This method will run after the Text, Excel, and JSON files are created.
	 *
	 * @param fileName The name of the file that was created.
	 */
	public void outputCreationSuccess(String fileName) {
		
	}
	
	/**
	 * The JSON file should describe each page and resource in the site:
	 * <ul>
	 * <li>One entry per page detailing:</li>
	 * 		<ul>
	 * 		<li>Number of local images</li>
	 * 		<li>Number of external images</li>
	 * 		<li>Number of scripts referenced</li>
	 * 		<li>Number of stylesheets utilized</li>
	 * 		<li>Listing of images</li>
	 * 		<li>Listing of scripts</li>
	 * 		<li>Listing of stylesheets</li>
	 * 		<li>Number of intra-page links</li>
	 * 		<li>Number of inter-site links</li>
	 * 		<li>Number of external links</li>
	 * 		</ul>
	 * <li>One entry per image detailing:</li>
	 * 		<ul>
	 * 		<li>Number of pages on which it is displayed</li>
	 * 		<li>Listing of pages on which it is displayed</li>
	 * 		</ul>
	 * <li>One entry per archive file detailing:</li>
	 * 		<ul>
	 * 		<li>File size</li>
	 * 		<li>Path to resource (relative to local site root)</li>
	 * 		</ul>
	 * <li>One entry per video file detailing:</li>
	 * 		<ul>
	 * 		<li>File size</li>
	 * 		<li>Path to resource (relative to local site root)</li>
	 * 		</ul>
	 * <li>One entry per audio file detailing:</li>
	 * 		<ul>
	 * 		<li>File size</li>
	 * 		<li>Path to resource (relative to local site root)</li>
	 * 		</ul>
	 * <li>One entry per non-categorized file detailing:</li>
	 * 		<ul>
	 * 		<li>File size</li>
	 * 		<li>Path to resource (relative to local site root)</li>
	 * 		</ul>
	 * </ul>
	 * 
	 * @author Brian Klarman	b.klarman@gmail.com
	 */
	public void jsonExport() {
		
	}
	
	/**
	 * The text file must output all traversed local pages sorted
	 * lexicographically by directory-starting with the site root. Each line
	 * should take the form:<p> size	page<p>
	 * where size is the cumulative size of all images (in MiB to 2 decimal
	 * places) on the page, and page is the local file path.
	 * <p>
	 * The last line of the file shall contain the sum of all page sizes.
	 * <p>
	 * This format mirrors what is generated by the Linux du command.
	 */
	public void textExport() {
		
	}
	
	/**
	 * Converts a file size in bytes to MiB to two decimal places. MiB is
	 * the Mebibyte which is 2^10 or 1,048,576 bytes.
	 * This formatted file size will be used during the Text file creation.
	 * 
	 * @see textExport()
	 */
	private void convertFileSize() {
		
	}
	
	/**
	 * The Excel document will consist of a single Excel workbook with a single
	 * sheet named 'summary'. The document will take the form:<p>
	 * Header row: Page, # Images, #CSS, Scripts, #Links (Intra-page),
	 * #Links (Inter-site), #Links (External).
	 * <p>
	 * The first row consists of headings. Each reaming row (one per internal)
	 * pages lists the indicated counts.
	 */
	public void excelExport() {
		
	}
	
	/**
	 * Creates the header row for the Excel file that is created.
	 * 
	 * @see excelExport()
	 */
	public void createExcelHeader() {
		
	}
	
	//************** Constructors **************
	
}
